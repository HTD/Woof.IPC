<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Woof.IPC</name>
    </assembly>
    <members>
        <member name="T:Woof.Ipc.Channel">
            <summary>
            IPC channel based on named or anonymous pipe.
            </summary>
        </member>
        <member name="P:Woof.Ipc.Channel.PipeId">
            <summary>
            Gets anonymous pipe ID.
            </summary>
        </member>
        <member name="P:Woof.Ipc.Channel.KeyData">
            <summary>
            Gets key data bytes.
            If encryption is not configured yet, new key data is generated.
            </summary>
        </member>
        <member name="P:Woof.Ipc.Channel.UseEncryption">
            <summary>
            Gets or sets option of using encrypted communication.
            </summary>
        </member>
        <member name="P:Woof.Ipc.Channel.UseCompression">
            <summary>
            Gets or sets option of using compressed communication.
            </summary>
        </member>
        <member name="P:Woof.Ipc.Channel.MessageBufferSize">
            <summary>
            Gets or sets message buffer size in bytes.
            </summary>
        </member>
        <member name="P:Woof.Ipc.Channel.Ready">
            <summary>
            Returns true if underlaying pipe is connected.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Channel.Mode">
            <summary>
            Pipe communication mode: Client, Server or Stream.
            </summary>
        </member>
        <member name="E:Woof.Ipc.Channel.DataReceived">
            <summary>
            Occurs when data from server is received.
            </summary>
        </member>
        <member name="E:Woof.Ipc.Channel.ClientDisconnected">
            <summary>
            Occurs when client has disconnected from server.
            </summary>
        </member>
        <member name="M:Woof.Ipc.Channel.#ctor(Woof.Ipc.Channel.Modes,System.IO.Pipes.PipeDirection,System.String,System.Byte[])">
            <summary>
            Creates IPC channel.
            </summary>
            <param name="mode">Connection mode: Client, Server or Stream.</param>
            <param name="direction">Underlying pipe direction: In, Out or InOut.</param>
            <param name="id">Anonymous pipe id as number, or named pipe name.</param>
            <param name="keyData">Key data used for encryption, for default null new key will be generated.</param>
        </member>
        <member name="M:Woof.Ipc.Channel.#ctor(System.IO.Stream,System.Byte[])">
            <summary>
            Creates IPC channel in stream mode.
            </summary>
            <param name="stream">Communication stream.</param>
            <param name="keyData">Optional encryption key data.</param>
        </member>
        <member name="M:Woof.Ipc.Channel.Start">
            <summary>
            Starts communication.
            </summary>
        </member>
        <member name="M:Woof.Ipc.Channel.Read">
            <summary>
            Reads boxed object from IPC channel.
            </summary>
            <returns>Received object after deserialization and optional decryption and decompression.</returns>
        </member>
        <member name="M:Woof.Ipc.Channel.Read``1">
            <summary>
            Reads typed object from IPC channel.
            </summary>
            <typeparam name="T">Serializable type.</typeparam>
            <returns>Received object after deserialization and optional decryption and decompression.</returns>
        </member>
        <member name="M:Woof.Ipc.Channel.Write(System.Object)">
            <summary>
            Writes boxed object to IPC channel.
            </summary>
            <param name="data">Boxed object.</param>
        </member>
        <member name="M:Woof.Ipc.Channel.Write``1(``0)">
            <summary>
            Writes typed object to IPC channel.
            </summary>
            <typeparam name="T">Serializable type.</typeparam>
            <param name="data">Data to serialize.</param>
        </member>
        <member name="M:Woof.Ipc.Channel.ReadBytes">
            <summary>
            Reads raw bytes from IPC channel.
            </summary>
            <returns>Received bytes after optional decryption and decompression.</returns>
        </member>
        <member name="M:Woof.Ipc.Channel.ReadUTF8">
            <summary>
            Reads UTF-8 encoded text from IPC channel.
            </summary>
            <returns>Dedoced string.</returns>
        </member>
        <member name="M:Woof.Ipc.Channel.WriteBytes(System.Byte[])">
            <summary>
            Writes raw bytes to IPC channel.
            </summary>
            <param name="data">Raw data bytes.</param>
        </member>
        <member name="M:Woof.Ipc.Channel.WriteUTF8(System.String)">
            <summary>
            Writes UTF-8 encoded text to IPC channel.
            </summary>
            <param name="data">Input string.</param>
        </member>
        <member name="T:Woof.Ipc.Channel.Modes">
            <summary>
            Underlying pipe operation modes.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Channel.Modes.Client">
            <summary>
            The pipe acts as client, listening server is required for starting communication.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Channel.Modes.Server">
            <summary>
            The pipe acts as server, accepting connections from client.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Channel.Modes.Stream">
            <summary>
            The pipe operates in special, stream mode, not really suitable for normal IPC.
            </summary>
        </member>
        <member name="T:Woof.Ipc.Channel.DataEventArgs">
            <summary>
            Arguments for IPC data events.
            </summary>
        </member>
        <member name="P:Woof.Ipc.Channel.DataEventArgs.Request">
            <summary>
            Boxed object passed to event handler.
            </summary>
        </member>
        <member name="P:Woof.Ipc.Channel.DataEventArgs.Response">
            <summary>
            Boxed object passed as event handler result and returned to requesting process.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Channel.DefaultMessageBufferSize">
            <summary>
            Default buffer size for messages: 64KB.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Channel.Pipe">
            <summary>
            Generic pipe <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Channel.IsAnonymousPipe">
            <summary>
            True if underlying pipe is <see cref="T:System.IO.Pipes.AnonymousPipeClientStream"/> or <see cref="T:System.IO.Pipes.AnonymousPipeServerStream"/>.
            </summary>
        </member>
        <member name="P:Woof.Ipc.Channel.WriteCache">
            <summary>
            <see cref="T:System.IO.MemoryStream"/> used as write cache.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Channel.Serialization">
            <summary>
            Data serialization module.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Channel.Compression">
            <summary>
            Data compression module.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Channel.Encryption">
            <summary>
            Data encryption module.
            </summary>
        </member>
        <member name="M:Woof.Ipc.Channel.Receive(System.Byte[])">
            <summary>
            Processes received data with encryption and compression modules.
            If enabled in properties - the data will be decrypted and then decompressed.
            </summary>
            <param name="data">Raw input data.</param>
            <returns>Processed data. Null for null or empty input.</returns>
        </member>
        <member name="M:Woof.Ipc.Channel.Dispatch(System.Byte[])">
            <summary>
            Process data being dispatched with encryption and compression modules.
            If enabled in properties - the data will be compressed and then encrypted.
            </summary>
            <param name="data">Raw input data.</param>
            <returns>Processed data. Null for null or empty input.</returns>
        </member>
        <member name="M:Woof.Ipc.Channel.AsyncConnectionEstablished(System.IAsyncResult)">
            <summary>
            The callback function for <see cref="M:System.IO.Pipes.NamedPipeServerStream.BeginWaitForConnection(System.AsyncCallback,System.Object)"/>.
            </summary>
            <param name="a">Status of asynchronous operation.</param>
        </member>
        <member name="M:Woof.Ipc.Channel.OnDataReceived(Woof.Ipc.Channel.DataEventArgs)">
            <summary>
            Triggers <see cref="E:Woof.Ipc.Channel.DataReceived"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Woof.Ipc.Channel.OnClientDisconnected(System.EventArgs)">
            <summary>
            Triggers <see cref="E:Woof.Ipc.Channel.ClientDisconnected"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:Woof.Ipc.Channel.IsDisposed">
            <summary>
            True if pipe streams has been disposed.
            </summary>
        </member>
        <member name="M:Woof.Ipc.Channel.Dispose">
            <summary>
            Disposes pipe streams.
            </summary>
        </member>
        <member name="T:Woof.Ipc.ClientProcess">
            <summary>
            Main IPC process class.
            </summary>
        </member>
        <member name="P:Woof.Ipc.ClientProcess.StartAsCurrentUser">
            <summary>
            Gets or sets an options of starting process as current user. Set true to interact with user sessions from System process.
            </summary>
        </member>
        <member name="P:Woof.Ipc.ClientProcess.ActualProcess">
            <summary>
            Returns underlying client process as <see cref="T:System.Diagnostics.Process"/>.
            </summary>
        </member>
        <member name="P:Woof.Ipc.ClientProcess.Arguments">
            <summary>
            Gets the command line arguments collection created with the process.
            </summary>
        </member>
        <member name="P:Woof.Ipc.ClientProcess.StartInfo">
            <summary>
            Gets the sets of values used to start the process.
            </summary>
        </member>
        <member name="P:Woof.Ipc.ClientProcess.IsDisposed">
            <summary>
            True if the process has been disposed.
            </summary>
        </member>
        <member name="E:Woof.Ipc.ClientProcess.DataReceived">
            <summary>
            Occures when client process received data from server.
            </summary>
        </member>
        <member name="E:Woof.Ipc.ClientProcess.ClientDisconnected">
            <summary>
            Occurs when client process has been disconnected from server.
            </summary>
        </member>
        <member name="E:Woof.Ipc.ClientProcess.ClientStarted">
            <summary>
            Occurs when client process has started.
            </summary>
        </member>
        <member name="E:Woof.Ipc.ClientProcess.ClientExited">
            <summary>
            Occurs when client process has exited.
            </summary>
        </member>
        <member name="M:Woof.Ipc.ClientProcess.#ctor(System.String,System.String,System.String[])">
            <summary>
            Creates new IPC client process.
            </summary>
            <param name="path">Executable path.</param>
            <param name="pipeName">Name of the pipe used for communication.</param>
            <param name="arguments">String argumets passed to executable.</param>
        </member>
        <member name="M:Woof.Ipc.ClientProcess.SetArg(System.String,System.String)">
            <summary>
            Replaces specifed placeholder in executable arguments set with specified string.
            </summary>
            <param name="placeholder">Placeholder string.</param>
            <param name="value">String value to set.</param>
        </member>
        <member name="M:Woof.Ipc.ClientProcess.SetArgs(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Replaces multiple placeholders in executable arguments set with dictionary values.
            </summary>
            <param name="map">A dictionary of placeholder => value pairs.</param>
        </member>
        <member name="M:Woof.Ipc.ClientProcess.Start">
            <summary>
            Starts client process.
            </summary>
        </member>
        <member name="M:Woof.Ipc.ClientProcess.SendData(System.Object)">
            <summary>
            Sends boxed object to client process.
            </summary>
            <param name="data">Boxed object.</param>
        </member>
        <member name="M:Woof.Ipc.ClientProcess.SendBytes(System.Byte[])">
            <summary>
            Sends raw bytes to client process.
            </summary>
            <param name="data">Raw bytes.</param>
        </member>
        <member name="M:Woof.Ipc.ClientProcess.SendUTF8(System.String)">
            <summary>
            Sends UTF-8 encoded string to client process.
            </summary>
            <param name="data">Input string.</param>
        </member>
        <member name="F:Woof.Ipc.ClientProcess.ArgumentsTemplate">
            <summary>
            Contains original process arguments as a template for <see cref="M:Woof.Ipc.ClientProcess.SetArg(System.String,System.String)"/> and <see cref="M:Woof.Ipc.ClientProcess.SetArgs(System.Collections.Generic.Dictionary{System.String,System.String})"/>.
            </summary>
        </member>
        <member name="M:Woof.Ipc.ClientProcess.PassDataReceived(System.Object,Woof.Ipc.Channel.DataEventArgs)">
            <summary>
            Passes <see cref="E:Woof.Ipc.CombinedChannel.DataReceived"/> event from combined channel to client process.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Woof.Ipc.ClientProcess.PassClientDisconnected(System.Object,System.EventArgs)">
            <summary>
            Passes <see cref="E:Woof.Ipc.CombinedChannel.ClientDisconnected"/> event from combined channel to client process.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Woof.Ipc.ClientProcess.PassClientExited(System.Object,System.EventArgs)">
            <summary>
            Passes <see cref="E:Woof.Ipc.ClientProcess.ClientExited"/> event from underlying <see cref="!:ProcessEx"/> to client process.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Woof.Ipc.ClientProcess.OnDataReceived(Woof.Ipc.Channel.DataEventArgs)">
            <summary>
            Triggers <see cref="E:Woof.Ipc.ClientProcess.DataReceived"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Woof.Ipc.ClientProcess.OnClientDisconnected(System.EventArgs)">
            <summary>
            Triggers <see cref="E:Woof.Ipc.ClientProcess.ClientDisconnected"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Woof.Ipc.ClientProcess.OnClientExited(System.EventArgs)">
            <summary>
            Triggers <see cref="E:Woof.Ipc.ClientProcess.ClientExited"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Woof.Ipc.ClientProcess.OnClientStarted(System.EventArgs)">
            <summary>
            Triggers <see cref="E:Woof.Ipc.ClientProcess.ClientStarted"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Woof.Ipc.ClientProcess.Dispose">
            <summary>
            Disposes combined communication channel and underlying <see cref="T:System.Diagnostics.Process"/> or <see cref="!:ProcessEx"/> object.
            </summary>
        </member>
        <member name="T:Woof.Ipc.CombinedChannel">
            <summary>
            IPC channel combined from named and anonymous pipes used for encrypted communication.
            </summary>
        </member>
        <member name="P:Woof.Ipc.CombinedChannel.Timeout">
            <summary>
            Gets or sets the time (in milliseconds) given to establish / complete communication before <see cref="T:System.TimeoutException"/> is triggered.
            </summary>
        </member>
        <member name="P:Woof.Ipc.CombinedChannel.UseEncryption">
            <summary>
            Gets or sets the option of using encrypted communication. Default true.
            </summary>
        </member>
        <member name="P:Woof.Ipc.CombinedChannel.UseCompression">
            <summary>
            Gets or sets the option of using compressed communication. Default true.
            </summary>
        </member>
        <member name="P:Woof.Ipc.CombinedChannel.InitalPipeId">
            <summary>
            Gets initial (anonymous) pipe identifier.
            </summary>
        </member>
        <member name="E:Woof.Ipc.CombinedChannel.DataReceived">
            <summary>
            Occurs when main channel has received data.
            </summary>
        </member>
        <member name="E:Woof.Ipc.CombinedChannel.ClientDisconnected">
            <summary>
            Occurs when the client has disconnected from main channel.
            </summary>
        </member>
        <member name="M:Woof.Ipc.CombinedChannel.#ctor(Woof.Ipc.Channel.Modes,System.String,System.String)">
            <summary>
            Creates new combined channel.
            </summary>
            <param name="mode"><see cref="F:Woof.Ipc.Channel.Modes.Client"/> or <see cref="F:Woof.Ipc.Channel.Modes.Server"/>.</param>
            <param name="name">Name for the named pipe.</param>
            <param name="id">Id of the anonymous pipe.</param>
        </member>
        <member name="M:Woof.Ipc.CombinedChannel.Start">
            <summary>
            Starts the communication with the main channel.
            </summary>
        </member>
        <member name="M:Woof.Ipc.CombinedChannel.Reinitialize">
            <summary>
            Writes key data again to the initial channel.
            </summary>
        </member>
        <member name="M:Woof.Ipc.CombinedChannel.Read">
            <summary>
            Reads data from main channel as object.
            </summary>
            <returns>Deserialized object.</returns>
        </member>
        <member name="M:Woof.Ipc.CombinedChannel.Read``1">
            <summary>
            Reads data from main channel as T.
            </summary>
            <typeparam name="T">Serializable type.</typeparam>
            <returns>Deserialized T.</returns>
        </member>
        <member name="M:Woof.Ipc.CombinedChannel.ReadBytes">
            <summary>
            Reads raw data from main channel.
            </summary>
            <returns>Raw data.</returns>
        </member>
        <member name="M:Woof.Ipc.CombinedChannel.ReadUTF8">
            <summary>
            Reads UTF-8 text from main channel.
            </summary>
            <returns>Unicode string.</returns>
        </member>
        <member name="M:Woof.Ipc.CombinedChannel.Write(System.Object)">
            <summary>
            Writes an object to main channel.
            </summary>
            <param name="data">Serializable object.</param>
        </member>
        <member name="M:Woof.Ipc.CombinedChannel.Write``1(``0)">
            <summary>
            Writes a serializable object of type T to main channel.
            </summary>
            <typeparam name="T">Serializable type.</typeparam>
            <param name="data">Data to serialize.</param>
        </member>
        <member name="M:Woof.Ipc.CombinedChannel.WriteBytes(System.Byte[])">
            <summary>
            Writes raw data to main channel.
            </summary>
            <param name="data">Raw data.</param>
        </member>
        <member name="M:Woof.Ipc.CombinedChannel.WriteUTF8(System.String)">
            <summary>
            Writes text as UTF8 to main channel.
            </summary>
            <param name="data">Unicode string.</param>
        </member>
        <member name="M:Woof.Ipc.CombinedChannel.Request(System.Object,System.Int32)">
            <summary>
            Sends a request by initiating data exchange with the remote process.
            </summary>
            <param name="data">Data to send.</param>
            <param name="timeout">Time in milliseconds after <see cref="T:System.TimeoutException"/> will be thrown when remote process doesn't reply.</param>
            <returns>Response data.</returns>
        </member>
        <member name="M:Woof.Ipc.CombinedChannel.Request``2(``0,System.Int32)">
            <summary>
            Sends a request by initiaing data exchange with the remote process.
            </summary>
            <typeparam name="TRequest">Request data type.</typeparam>
            <typeparam name="TResponse">Response data type.</typeparam>
            <param name="data">Request data.</param>
            <param name="timeout">Time in milliseconds after <see cref="T:System.TimeoutException"/> will be thrown when remote process doesn't reply.</param>
            <returns>Response data.</returns>
        </member>
        <member name="M:Woof.Ipc.CombinedChannel.Notify(System.Object,System.Int32)">
            <summary>
            Sends a data object to remote process without receiving a response.
            </summary>
            <param name="data">Data to send.</param>
            <param name="timeout">Time in milliseconds after <see cref="T:System.TimeoutException"/> will be thrown when remote process doesn't receive.</param>
        </member>
        <member name="M:Woof.Ipc.CombinedChannel.Dispose">
            <summary>
            Disposes the initial and main channels if applicable.
            </summary>
        </member>
        <member name="T:Woof.Ipc.Compression">
            <summary>
            IPC compression module.
            </summary>
        </member>
        <member name="M:Woof.Ipc.Compression.Compress(System.Byte[])">
            <summary>
            Compresses data using <see cref="T:System.IO.Compression.DeflateStream"/>.
            </summary>
            <param name="data">Input data.</param>
            <returns>Compressed data.</returns>
        </member>
        <member name="M:Woof.Ipc.Compression.Decompress(System.Byte[])">
            <summary>
            Compressed data using <see cref="T:System.IO.Compression.DeflateStream"/>.
            </summary>
            <param name="data">Compressed data.</param>
            <returns>Decompressed data.</returns>
        </member>
        <member name="T:Woof.Ipc.Encryption">
            <summary>
            IPC encryption module.
            </summary>
        </member>
        <member name="P:Woof.Ipc.Encryption.Key">
            <summary>
            Gets or sets the secret key to use for the symmetric algorithm.
            </summary>
        </member>
        <member name="P:Woof.Ipc.Encryption.IV">
            <summary>
            Gets or sets the initialization vector to use for the symmetric algorithm.
            </summary>
        </member>
        <member name="P:Woof.Ipc.Encryption.KeyData">
            <summary>
            Gets or sets both <see cref="P:Woof.Ipc.Encryption.Key"/> and <see cref="P:Woof.Ipc.Encryption.IV"/> from merged binary buffer.
            </summary>
        </member>
        <member name="M:Woof.Ipc.Encryption.#ctor">
            <summary>
            Initializes AES IPC encryption with PRNG data.
            </summary>
        </member>
        <member name="M:Woof.Ipc.Encryption.#ctor(System.Byte[])">
            <summary>
            Initializes AES IPC encryption with received data.
            </summary>
            <param name="keyData">48 bytes.</param>
        </member>
        <member name="M:Woof.Ipc.Encryption.Encrypt(System.Byte[])">
            <summary>
            Encrypts binary message for IPC.
            </summary>
            <param name="message">Raw bytes to encrypt.</param>
            <returns>Encrypted bytes.</returns>
        </member>
        <member name="M:Woof.Ipc.Encryption.Decrypt(System.Byte[])">
            <summary>
            Decrypts binary message for IPC
            </summary>
            <param name="message">Encrypted bytes.</param>
            <returns>Decrypted bytes.</returns>
        </member>
        <member name="T:Woof.Ipc.ProcessArguments">
            <summary>
            Command line arguments collection class.
            </summary>
        </member>
        <member name="P:Woof.Ipc.ProcessArguments.Item(System.Int32)">
            <summary>
            Gets or sets argument value specified with its index.
            </summary>
            <param name="i">Zero based collection index.</param>
            <returns>Argument value.</returns>
        </member>
        <member name="P:Woof.Ipc.ProcessArguments.Length">
            <summary>
            Returs arguments collection length.
            </summary>
        </member>
        <member name="M:Woof.Ipc.ProcessArguments.#ctor(System.String[])">
            <summary>
            Creates new command line arguments collection.
            </summary>
            <param name="arguments">Unquoted arguments.</param>
        </member>
        <member name="M:Woof.Ipc.ProcessArguments.ToString">
            <summary>
            Serializes command line arguments collection with necessary character quoting.
            </summary>
            <returns>Serialized command line arguments string.</returns>
        </member>
        <member name="M:Woof.Ipc.ProcessArguments.AppendArgument(System.Text.StringBuilder,System.String)">
            <summary>
            Quotes argument string and appends it to specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="b"><see cref="T:System.Text.StringBuilder"/> object the quoted argument will be appended to.</param>
            <param name="arg">Unquoted argument value.</param>
        </member>
        <member name="F:Woof.Ipc.ProcessArguments.Items">
            <summary>
            Argument values.
            </summary>
        </member>
        <member name="F:Woof.Ipc.ProcessArguments.ArgQuoteChars">
            <summary>
            Characters which must be quoted in argument strings.
            </summary>
        </member>
        <member name="T:Woof.Ipc.ProcessExtensions">
            <summary>
            Extends the Process class providing methods to communicate with processes.
            </summary>
        </member>
        <member name="M:Woof.Ipc.ProcessExtensions.SendCloseRequest(System.Diagnostics.Process)">
            <summary>
            Sends a WM_CLOSE message to the process.
            This asks the process politely to shut down properly.
            </summary>
            <param name="process">Process.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Woof.Ipc.ProcessExtensions.SendMessage(System.Diagnostics.Process,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Sends a message to the first enumerated window in the first enumerated thread with at least one window, and returns the handle of that window through the hwnd output parameter if such a window was enumerated.  If a window was enumerated, the return value is the return value of the SendMessage call, otherwise the return value is zero.
            </summary>
            <param name="p">Process.</param>
            <param name="msg">The message to be sent.</param>
            <param name="wParam">Additional message-specific information.</param>
            <param name="lParam">Additional message-specific information.</param>
            <returns>The return value specifies the result of the message processing; it depends on the message sent.</returns>
        </member>
        <member name="M:Woof.Ipc.ProcessExtensions.PostMessage(System.Diagnostics.Process,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Posts a message to the first enumerated window in the first enumerated thread with at least one window, and returns the handle of that window through the hwnd output parameter if such a window was enumerated.  If a window was enumerated, the return value is the return value of the PostMessage call, otherwise the return value is false.
            </summary>
            <param name="p">Process.</param>
            <param name="msg">The message to be sent.</param>
            <param name="wParam">Additional message-specific information.</param>
            <param name="lParam">Additional message-specific information.</param>
            <returns>True if successfull.</returns>
        </member>
        <member name="M:Woof.Ipc.ProcessExtensions.PostThreadMessage(System.Diagnostics.Process,System.UInt32,System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>
            Posts a thread message to the first enumerated thread (when ensureTargetThreadHasWindow is false), or posts a thread message to the first enumerated thread with a window, unless no windows are found in which case the call fails.  If an appropriate thread was found, the return value is the return value of PostThreadMessage call, otherwise the return value is false.
            </summary>
            <param name="p">Process.</param>
            <param name="msg">The message to be sent.</param>
            <param name="wParam">Additional message-specific information.</param>
            <param name="lParam">Additional message-specific information.</param>
            <param name="ensureTargetThreadHasWindow">Set true for threads having windows.</param>
            <returns>True if successfull.</returns>
        </member>
        <member name="M:Woof.Ipc.ProcessExtensions.GetWindowHandles(System.Diagnostics.Process)">
            <summary>
            Enumerates window handles of the process.
            </summary>
            <param name="process">Process.</param>
            <returns>Handles enumeration.</returns>
        </member>
        <member name="T:Woof.Ipc.Serialization">
            <summary>
            IPC serialization module.
            </summary>
        </member>
        <member name="M:Woof.Ipc.Serialization.Serialize(System.Object)">
            <summary>
            Serializes serializable boxed object.
            </summary>
            <param name="data">Serializable boxed object.</param>
            <returns>Binary data.</returns>
        </member>
        <member name="M:Woof.Ipc.Serialization.Serialize``1(``0)">
            <summary>
            Serializes serializable object with type.
            </summary>
            <typeparam name="T">Serializable type.</typeparam>
            <param name="data">Data to serialize.</param>
            <returns>Binary data.</returns>
        </member>
        <member name="M:Woof.Ipc.Serialization.Deserialize(System.Byte[])">
            <summary>
            Deserializes binary data to boxed object.
            </summary>
            <param name="data">Binary data.</param>
            <returns>Boxed object.</returns>
        </member>
        <member name="M:Woof.Ipc.Serialization.Deserialize``1(System.Byte[])">
            <summary>
            Deserializes binary data to specified type.
            </summary>
            <typeparam name="T">Serializable type.</typeparam>
            <param name="data">Binary data.</param>
            <returns>Deserialized data.</returns>
        </member>
        <member name="T:Woof.Ipc.UserProcess">
            <summary>
            Special class allowing to create process as user from SYSTEM account context.
            </summary>
        </member>
        <member name="P:Woof.Ipc.UserProcess.IsSystemContext">
            <summary>
            Gets a value indicationg whether the current account is Windows System account.
            </summary>
        </member>
        <member name="M:Woof.Ipc.UserProcess.Start(System.Diagnostics.ProcessStartInfo)">
            <summary>
            Starts a process as user from SYSTEM account context, in user context behaves exactly as <see cref="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)"/>.
            IMPORTANT: UseShellExecute property of the <see cref="T:System.Diagnostics.ProcessStartInfo"/> provided must be false!
            </summary>
            <param name="processStartInfo">
            The <see cref="T:System.Diagnostics.ProcessStartInfo"/> that contains the information that is 
            used to start the process, including the file name and any command-line arguments.</param>
            <returns>A new System.Diagnostics.Process that is associated with the process resource,
            or null if no process resource is started. Note that a new process that’s started
            alongside already running instances of the same process will be independent from
            the others. In addition, Start may return a non-null Process with its System.Diagnostics.Process.HasExited
            property already set to true. In this case, the started process may have activated
            an existing instance of itself and then exited.</returns>
        </member>
        <member name="M:Woof.Ipc.UserProcess.CreateProcessAsUser(System.Diagnostics.ProcessStartInfo)">
            <summary>
            Uses Win32 API CreateProcessAsUser to start defined process in current user (GUI session owner) context.
            </summary>
            <returns>The process created.</returns>
            <exception cref="T:System.ArgumentException">The process specified by the processId parameter is not running. The identifier might be expired.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:Woof.Ipc.Win32Imports.NativeMethods.CreateEnvironmentBlock(System.IntPtr@,System.IntPtr,System.Boolean)"/> or <see cref="M:Woof.Ipc.Win32Imports.NativeMethods.CreateProcessAsUser(System.IntPtr,System.String,System.String,System.IntPtr,System.IntPtr,System.Boolean,Woof.Ipc.Win32Types.ProcessCreationFlags,System.IntPtr,System.String,Woof.Ipc.Win32Types.StartupInfo@,Woof.Ipc.Win32Types.ProcessInformation@)"/> failed.</exception>
            <exception cref="T:System.UnauthorizedAccessException"><see cref="M:Woof.Ipc.UserProcess.GetSessionUserToken(System.IntPtr@)"/> failed.</exception>
        </member>
        <member name="M:Woof.Ipc.UserProcess.GetActiveSessionId">
            <summary>
            Gets the active session identifier.
            </summary>
            <returns>Active session identifier.</returns>
        </member>
        <member name="M:Woof.Ipc.UserProcess.DisconnectActiveSession">
            <summary>
            Disconnects the active session. The local user using the computer is logged off immediately.
            </summary>
        </member>
        <member name="M:Woof.Ipc.UserProcess.GetSessionUserToken(System.IntPtr@)">
            <summary>
            Gets the user token from the currently active session
            </summary>
            <param name="phUserToken">A pointer to user token structure.</param>
            <returns>True if successfull.</returns>
        </member>
        <member name="M:Woof.Ipc.Win32Imports.NativeMethods.CreateProcessAsUser(System.IntPtr,System.String,System.String,System.IntPtr,System.IntPtr,System.Boolean,Woof.Ipc.Win32Types.ProcessCreationFlags,System.IntPtr,System.String,Woof.Ipc.Win32Types.StartupInfo@,Woof.Ipc.Win32Types.ProcessInformation@)">
            <summary>
            Creates a new process and its primary thread. The new process runs in the security context of the user represented by the specified token.
            </summary>
            <param name="hToken">A handle to the primary token that represents a user.</param>
            <param name="lpApplicationName">The name of the module to be executed.</param>
            <param name="lpCommandLine">The command line to be executed. The maximum length of this string is 32K characters. If lpApplicationName is NULL, the module name portion of lpCommandLine is limited to MAX_PATH characters.</param>
            <param name="lpProcessAttributes">A pointer to a SECURITY_ATTRIBUTES structure that specifies a security descriptor for the new process object and determines whether child processes can inherit the returned handle to the process. If lpProcessAttributes is NULL or lpSecurityDescriptor is NULL, the process gets a default security descriptor and the handle cannot be inherited. The default security descriptor is that of the user referenced in the hToken parameter. This security descriptor may not allow access for the caller, in which case the process may not be opened again after it is run. The process handle is valid and will continue to have full access rights.</param>
            <param name="lpThreadAttributes">A pointer to a SECURITY_ATTRIBUTES structure that specifies a security descriptor for the new thread object and determines whether child processes can inherit the returned handle to the thread. If lpThreadAttributes is NULL or lpSecurityDescriptor is NULL, the thread gets a default security descriptor and the handle cannot be inherited. The default security descriptor is that of the user referenced in the hToken parameter. This security descriptor may not allow access for the caller.</param>
            <param name="bInheritHandle">If this parameter is TRUE, each inheritable handle in the calling process is inherited by the new process. If the parameter is FALSE, the handles are not inherited. Note that inherited handles have the same value and access rights as the original handles. Terminal Services:  You cannot inherit handles across sessions. Additionally, if this parameter is TRUE, you must create the process in the same session as the caller.</param>
            <param name="dwCreationFlags">The flags that control the priority class and the creation of the process. For a list of values, see Process Creation Flags. This parameter also controls the new process's priority class, which is used to determine the scheduling priorities of the process's threads. For a list of values, see GetPriorityClass. If none of the priority class flags is specified, the priority class defaults to NORMAL_PRIORITY_CLASS unless the priority class of the creating process is IDLE_PRIORITY_CLASS or BELOW_NORMAL_PRIORITY_CLASS. In this case, the child process receives the default priority class of the calling process.</param>
            <param name="lpEnvironment">A pointer to an environment block for the new process. If this parameter is NULL, the new process uses the environment of the calling process.</param>
            <param name="lpCurrentDirectory">The full path to the current directory for the process. The string can also specify a UNC path. If this parameter is NULL, the new process will have the same current drive and directory as the calling process. (This feature is provided primarily for shells that need to start an application and specify its initial drive and working directory.)</param>
            <param name="lpStartupInfo">A pointer to a <see cref="T:Woof.Ipc.Win32Types.StartupInfo"/> or STARTUPINFOEX structure.</param>
            <param name="lpProcessInformation">A pointer to a PROCESS_INFORMATION structure that receives identification information about the new process. Handles in PROCESS_INFORMATION must be closed with CloseHandle when they are no longer needed.</param>
            <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:Woof.Ipc.Win32Imports.NativeMethods.DuplicateTokenEx(System.IntPtr,System.UInt32,System.IntPtr,System.Int32,System.Int32,System.IntPtr@)">
            <summary>
            Creates a new access token that duplicates an existing token. This function can create either a primary token or an impersonation token.
            </summary>
            <param name="ExistingTokenHandle">A handle to an access token opened with TOKEN_DUPLICATE access.</param>
            <param name="dwDesiredAccess">Specifies the requested access rights for the new token. The DuplicateTokenEx function compares the requested access rights with the existing token's discretionary access control list (DACL) to determine which rights are granted or denied. To request the same access rights as the existing token, specify zero. To request all access rights that are valid for the caller, specify MAXIMUM_ALLOWED. For a list of access rights for access tokens, see Access Rights for Access-Token Objects.</param>
            <param name="lpThreadAttributes">A pointer to a SECURITY_ATTRIBUTES structure that specifies a security descriptor for the new token and determines whether child processes can inherit the token. If lpTokenAttributes is NULL, the token gets a default security descriptor and the handle cannot be inherited. If the security descriptor contains a system access control list (SACL), the token gets ACCESS_SYSTEM_SECURITY access right, even if it was not requested in dwDesiredAccess. To set the owner in the security descriptor for the new token, the caller's process token must have the SE_RESTORE_NAME privilege set.</param>
            <param name="TokenType">Specifies one of the following values from the TOKEN_TYPE enumeration.</param>
            <param name="ImpersonationLevel">Specifies a value from the <see cref="T:Woof.Ipc.Win32Types.SecurityImpersonationLevel"/> enumeration that indicates the impersonation level of the new token.</param>
            <param name="DuplicateTokenHandle">A pointer to a variable that receives a handle to the duplicate token. This handle has TOKEN_IMPERSONATE and TOKEN_QUERY access to the new token. When you have finished using the new token, call the CloseHandle function to close the token handle.</param>
            <returns>If the function succeeds, the function returns a nonzero value. If the function fails, it returns zero.To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:Woof.Ipc.Win32Imports.NativeMethods.CreateEnvironmentBlock(System.IntPtr@,System.IntPtr,System.Boolean)">
            <summary>
            Retrieves the environment variables for the specified user. This block can then be passed to the CreateProcessAsUser function.
            </summary>
            <param name="lpEnvironment">When this function returns, receives a pointer to the new environment block. The environment block is an array of null-terminated Unicode strings. The list ends with two nulls (\0\0).</param>
            <param name="hToken">Token for the user, returned from the LogonUser function. If this is a primary token, the token must have TOKEN_QUERY and TOKEN_DUPLICATE access. If the token is an impersonation token, it must have TOKEN_QUERY access. For more information, see Access Rights for Access-Token Objects. If this parameter is NULL, the returned environment block contains system variables only.</param>
            <param name="bInherit">Specifies whether to inherit from the current process' environment. If this value is TRUE, the process inherits the current process' environment. If this value is FALSE, the process does not inherit the current process' environment.</param>
            <returns>TRUE if successful; otherwise, FALSE. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:Woof.Ipc.Win32Imports.NativeMethods.DestroyEnvironmentBlock(System.IntPtr)">
            <summary>
            Frees environment variables created by the CreateEnvironmentBlock function.
            </summary>
            <param name="lpEnvironment">Pointer to the environment block created by CreateEnvironmentBlock. The environment block is an array of null-terminated Unicode strings. The list ends with two nulls (\0\0).</param>
            <returns>TRUE if successful; otherwise, FALSE. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:Woof.Ipc.Win32Imports.NativeMethods.CloseHandle(System.IntPtr)">
            <summary>
            Closes an open object handle.
            </summary>
            <param name="hObject">A valid handle to an open object.</param>
            <returns>TRUE if successful; otherwise, FALSE. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:Woof.Ipc.Win32Imports.NativeMethods.WTSGetActiveConsoleSessionId">
            <summary>
            Retrieves the session identifier of the console session. The console session is the session that is currently attached to the physical console. Note that it is not necessary that Remote Desktop Services be running for this function to succeed.
            </summary>
            <returns>The session identifier of the session that is attached to the physical console. If there is no session attached to the physical console, (for example, if the physical console session is in the process of being attached or detached), this function returns 0xFFFFFFFF.</returns>
        </member>
        <member name="M:Woof.Ipc.Win32Imports.NativeMethods.WTSQueryUserToken(System.UInt32,System.IntPtr@)">
            <summary>
            Obtains the primary access token of the logged-on user specified by the session ID. To call this function successfully, the calling application must be running within the context of the LocalSystem account and have the SE_TCB_NAME privilege.
            </summary>
            <param name="SessionId">A Remote Desktop Services session identifier. Any program running in the context of a service will have a session identifier of zero (0). You can use the WTSEnumerateSessions function to retrieve the identifiers of all sessions on a specified RD Session Host server. To be able to query information for another user's session, you need to have the Query Information permission. For more information, see Remote Desktop Services Permissions. To modify permissions on a session, use the Remote Desktop Services Configuration administrative tool.</param>
            <param name="phToken">If the function succeeds, receives a pointer to the token handle for the logged-on user. Note that you must call the CloseHandle function to close this handle.</param>
            <returns></returns>
        </member>
        <member name="M:Woof.Ipc.Win32Imports.NativeMethods.WTSEnumerateSessions(System.IntPtr,System.Int32,System.Int32,System.IntPtr@,System.Int32@)">
            <summary>
            Retrieves a list of sessions on a Remote Desktop Session Host (RD Session Host) server.
            </summary>
            <param name="hServer">A handle to the RD Session Host server.</param>
            <param name="Reserved">This parameter is reserved. It must be zero.</param>
            <param name="Version">The version of the enumeration request. This parameter must be 1.</param>
            <param name="ppSessionInfo">A pointer to an array of WTS_SESSION_INFO structures that represent the retrieved sessions. To free the returned buffer, call the WTSFreeMemory function.</param>
            <param name="pCount">A pointer to the number of WTS_SESSION_INFO structures returned in the ppSessionInfo parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Woof.Ipc.Win32Imports.NativeMethods.WTSDisconnectSession(System.IntPtr,System.UInt32,System.Boolean)">
            <summary>
            Disconnects the logged-on user from the specified Remote Desktop Services session without closing the session. If the user subsequently logs on to the same Remote Desktop Session Host (RD Session Host) server, the user is reconnected to the same session.
            </summary>
            <param name="hServer">A handle to an RD Session Host server. Specify a handle opened by the WTSOpenServer or WTSOpenServerEx function, or specify WTS_CURRENT_SERVER_HANDLE to indicate the RD Session Host server on which your application is running.</param>
            <param name="sessionId">A Remote Desktop Services session identifier. To indicate the current session, specify WTS_CURRENT_SESSION. To retrieve the identifiers of all sessions on a specified RD Session Host server, use the WTSEnumerateSessions function.</param>
            <param name="bWait">Indicates whether the operation is synchronous. Specify TRUE to wait for the operation to complete, or FALSE to return immediately.</param>
            <returns></returns>
        </member>
        <member name="M:Woof.Ipc.Win32Imports.NativeMethods.SendMessage(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Sends the specified message to a window or windows. The SendMessage function calls the window procedure for the specified window and does not return until the window procedure has processed the message.
            </summary>
            <param name="hWnd">A handle to the window whose window procedure will receive the message. If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.</param>
            <param name="Msg">The message to be sent.</param>
            <param name="wParam">Additional message-specific information.</param>
            <param name="lParam">Additional message-specific information.</param>
            <returns>The return value specifies the result of the message processing; it depends on the message sent.</returns>
        </member>
        <member name="M:Woof.Ipc.Win32Imports.NativeMethods.PostMessage(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Places (posts) a message in the message queue associated with the thread that created the specified window and returns without waiting for the thread to process the message.
            </summary>
            <param name="hWnd">A handle to the window whose window procedure will receive the message. If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.</param>
            <param name="Msg">The message to be sent.</param>
            <param name="wParam">Additional message-specific information.</param>
            <param name="lParam">Additional message-specific information.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Woof.Ipc.Win32Imports.NativeMethods.PostThreadMessage(System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Posts a message to the message queue of the specified thread. It returns without waiting for the thread to process the message.
            </summary>
            <param name="threadId">The identifier of the thread to which the message is to be posted.</param>
            <param name="msg">The type of message to be posted.</param>
            <param name="wParam">Additional message-specific information.</param>
            <param name="lParam">Additional message-specific information.</param>
            <returns></returns>
        </member>
        <member name="M:Woof.Ipc.Win32Imports.NativeMethods.EnumThreadWindows(System.UInt32,Woof.Ipc.Win32Imports.NativeMethods.EnumThreadDelegate,System.IntPtr)">
            <summary>
            Enumerates all nonchild windows associated with a thread by passing the handle to each window, in turn, to an application-defined callback function. EnumThreadWindows continues until the last window is enumerated or the callback function returns FALSE. To enumerate child windows of a particular window, use the EnumChildWindows function.
            </summary>
            <param name="dwThreadId">The identifier of the thread whose windows are to be enumerated.</param>
            <param name="lpfn">A pointer to an application-defined callback function. For more information, see EnumThreadWndProc.</param>
            <param name="lParam">An application-defined value to be passed to the callback function.</param>
            <returns></returns>
        </member>
        <member name="M:Woof.Ipc.Win32Imports.NativeMethods.GetWindowThreadProcessId(System.IntPtr,System.UInt32@)">
            <summary>
            Retrieves the identifier of the thread that created the specified window and, optionally, the identifier of the process that created the window.
            </summary>
            <param name="hWnd">A handle to the window.</param>
            <param name="lpdwProcessId">A pointer to a variable that receives the process identifier. If this parameter is not NULL, GetWindowThreadProcessId copies the identifier of the process to the variable; otherwise, it does not.</param>
            <returns>The return value is the identifier of the thread that created the window.</returns>
        </member>
        <member name="T:Woof.Ipc.Win32Imports.NativeMethods.EnumThreadDelegate">
            <summary>
            An application-defined callback function used with the EnumThreadWindows function. It receives the window handles associated with a thread. The WNDENUMPROC type defines a pointer to this callback function. EnumThreadWndProc is a placeholder for the application-defined function name.
            </summary>
            <param name="hWnd">A handle to a window associated with the thread specified in the EnumThreadWindows function.</param>
            <param name="lParam">The application-defined value given in the EnumThreadWindows function.</param>
            <returns></returns>
        </member>
        <member name="T:Woof.Ipc.Win32Types.ShowWindow">
            <summary>
            ShowWindow command enumeration.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.ShowWindow.Hide">
            <summary>
            Hides the window and activates another window.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.ShowWindow.ShowNormal">
            <summary>
            Activates and displays a window. If the window is minimized or maximized, the system restores it to its original size and position. An application should specify this flag when displaying the window for the first time.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.ShowWindow.Normal">
            <summary>
            Default window size and position.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.ShowWindow.ShowMinimized">
            <summary>
            Activates the window and displays it as a minimized window.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.ShowWindow.ShowMaximized">
            <summary>
            Activates the window and displays it as a maximized window.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.ShowWindow.Maximize">
            <summary>
            Maximizes the specified window.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.ShowWindow.ShowNoActivate">
            <summary>
            Displays a window in its most recent size and position. This value is similar to SW_SHOWNORMAL, except that the window is not activated.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.ShowWindow.Show">
            <summary>
            Activates the window and displays it in its current size and position.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.ShowWindow.Minimize">
            <summary>
            Minimizes the specified window and activates the next top-level window in the Z order.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.ShowWindow.ShowMinNoActive">
            <summary>
            Displays the window as a minimized window. This value is similar to SW_SHOWMINIMIZED, except the window is not activated.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.ShowWindow.ShowNA">
            <summary>
            Displays the window in its current size and position. This value is similar to SW_SHOW, except that the window is not activated.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.ShowWindow.Restore">
            <summary>
            Activates and displays the window. If the window is minimized or maximized, the system restores it to its original size and position. An application should specify this flag when restoring a minimized window.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.ShowWindow.ShowDefault">
            <summary>
            Sets the show state based on the SW_ value specified in the STARTUPINFO structure passed to the CreateProcess function by the program that started the application.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.ShowWindow.Max">
            <summary>
            Sets the show state based on the SW_ value specified in the STARTUPINFO structure passed to the CreateProcess function by the program that started the application.
            </summary>
        </member>
        <member name="T:Woof.Ipc.Win32Types.WtsConnectStateClass">
            <summary>
            Specifies the connection state of a Remote Desktop Services session.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.WtsConnectStateClass.Active">
            <summary>
            A user is logged on to the WinStation.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.WtsConnectStateClass.Connected">
            <summary>
            The WinStation is connected to the client.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.WtsConnectStateClass.ConnectQuery">
            <summary>
            The WinStation is in the process of connecting to the client.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.WtsConnectStateClass.Shadow">
            <summary>
            The WinStation is shadowing another WinStation.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.WtsConnectStateClass.Disconnected">
            <summary>
            The WinStation is active but the client is disconnected.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.WtsConnectStateClass.Idle">
            <summary>
            The WinStation is waiting for a client to connect.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.WtsConnectStateClass.Listen">
            <summary>
            The WinStation is listening for a connection. A listener session waits for requests for new client connections. No user is logged on a listener session. A listener session cannot be reset, shadowed, or changed to a regular client session.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.WtsConnectStateClass.Reset">
            <summary>
            The WinStation is being reset.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.WtsConnectStateClass.Down">
            <summary>
            The WinStation is down due to an error.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.WtsConnectStateClass.Init">
            <summary>
            The WinStation is initializing.
            </summary>
        </member>
        <member name="T:Woof.Ipc.Win32Types.SecurityImpersonationLevel">
            <summary>
            Contains values that specify security impersonation levels. Security impersonation levels govern the degree to which a server process can act on behalf of a client process.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.SecurityImpersonationLevel.Anonymous">
            <summary>
            The server process cannot obtain identification information about the client, and it cannot impersonate the client. It is defined with no value given, and thus, by ANSI C rules, defaults to a value of zero.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.SecurityImpersonationLevel.Identification">
            <summary>
            The server process can obtain information about the client, such as security identifiers and privileges, but it cannot impersonate the client. This is useful for servers that export their own objects, for example, database products that export tables and views. Using the retrieved client-security information, the server can make access-validation decisions without being able to use other services that are using the client's security context.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.SecurityImpersonationLevel.Impersonation">
            <summary>
            The server process can impersonate the client's security context on its local system. The server cannot impersonate the client on remote systems.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.SecurityImpersonationLevel.Delegation">
            <summary>
            The server process can impersonate the client's security context on remote systems.
            </summary>
        </member>
        <member name="T:Woof.Ipc.Win32Types.TokenType">
            <summary>
            Contains values that differentiate between a primary token and an impersonation token.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.TokenType.Primary">
            <summary>
            Indicates a primary token.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.TokenType.Impersonation">
            <summary>
            Indicates an impersonation token.
            </summary>
        </member>
        <member name="T:Woof.Ipc.Win32Types.ProcessCreationFlags">
            <summary>
            Used by the CreateProcess, CreateProcessAsUser, CreateProcessWithLogonW, and CreateProcessWithTokenW functions. They can be specified in any combination, except as noted.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.ProcessCreationFlags.CreateBreakawayFromJob">
            <summary>
            The child processes of a process associated with a job are not associated with the job.
            If the calling process is not associated with a job, this constant has no effect. If the calling process is associated with a job, the job must set the JOB_OBJECT_LIMIT_BREAKAWAY_OK limit.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.ProcessCreationFlags.CreateDefaultErrorMode">
            <summary>
            The new process does not inherit the error mode of the calling process. Instead, the new process gets the default error mode.
            This feature is particularly useful for multithreaded shell applications that run with hard errors disabled.
            The default behavior is for the new process to inherit the error mode of the caller.Setting this flag changes that default behavior.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.ProcessCreationFlags.CreateNewConsole">
            <summary>
            The new process has a new console, instead of inheriting its parent's console (the default). For more information, see Creation of a Console.
            This flag cannot be used with DETACHED_PROCESS.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.ProcessCreationFlags.CreateNewProcessGroup">
            <summary>
            The new process is the root process of a new process group. The process group includes all processes that are descendants of this root process. The process identifier of the new process group is the same as the process identifier, which is returned in the lpProcessInformation parameter. Process groups are used by the GenerateConsoleCtrlEvent function to enable sending a CTRL+BREAK signal to a group of console processes.
            If this flag is specified, CTRL+C signals will be disabled for all processes within the new process group.
            This flag is ignored if specified with CREATE_NEW_CONSOLE.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.ProcessCreationFlags.CreateNoWindow">
            <summary>
            The process is a console application that is being run without a console window. Therefore, the console handle for the application is not set.
            This flag is ignored if the application is not a console application, or if it is used with either CREATE_NEW_CONSOLE or DETACHED_PROCESS.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.ProcessCreationFlags.CreateProtectedProcess">
            <summary>
            The process is to be run as a protected process. The system restricts access to protected processes and the threads of protected processes. For more information on how processes can interact with protected processes, see Process Security and Access Rights.
            To activate a protected process, the binary must have a special signature.This signature is provided by Microsoft but not currently available for non-Microsoft binaries.There are currently four protected processes: media foundation, audio engine, Windows error reporting, and system.Components that load into these binaries must also be signed.Multimedia companies can leverage the first two protected processes.For more information, see Overview of the Protected Media Path.
            Windows Server 2003 and Windows XP: This value is not supported.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.ProcessCreationFlags.CreatePreserveCodeAuthzLevel">
            <summary>
            Allows the caller to execute a child process that bypasses the process restrictions that would normally be applied automatically to the process.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.ProcessCreationFlags.CreateSecureProcess">
            <summary>
            This flag allows secure processes, that run in the Virtualization-Based Security environment, to launch.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.ProcessCreationFlags.CreateSeparateWowVdm">
            <summary>
            This flag is valid only when starting a 16-bit Windows-based application. If set, the new process runs in a private Virtual DOS Machine (VDM). By default, all 16-bit Windows-based applications run as threads in a single, shared VDM. The advantage of running separately is that a crash only terminates the single VDM; any other programs running in distinct VDMs continue to function normally. Also, 16-bit Windows-based applications that are run in separate VDMs have separate input queues. That means that if one application stops responding momentarily, applications in separate VDMs continue to receive input. The disadvantage of running separately is that it takes significantly more memory to do so. You should use this flag only if the user requests that 16-bit applications should run in their own VDM.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.ProcessCreationFlags.CreateSharedWowVdm">
            <summary>
            The flag is valid only when starting a 16-bit Windows-based application. If the DefaultSeparateVDM switch in the Windows section of WIN.INI is TRUE, this flag overrides the switch. The new process is run in the shared Virtual DOS Machine.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.ProcessCreationFlags.CreateSuspended">
            <summary>
            The primary thread of the new process is created in a suspended state, and does not run until the ResumeThread function is called.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.ProcessCreationFlags.CreateUnicodeEnvironment">
            <summary>
            If this flag is set, the environment block pointed to by lpEnvironment uses Unicode characters. Otherwise, the environment block uses ANSI characters.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.ProcessCreationFlags.DebugOnlyThisProcess">
            <summary>
            The calling thread starts and debugs the new process. It can receive all related debug events using the WaitForDebugEvent function.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.ProcessCreationFlags.DebugProcess">
            <summary>
            The calling thread starts and debugs the new process and all child processes created by the new process. It can receive all related debug events using the WaitForDebugEvent function.
            A process that uses DEBUG_PROCESS becomes the root of a debugging chain. This continues until another process in the chain is created with DEBUG_PROCESS.
            If this flag is combined with DEBUG_ONLY_THIS_PROCESS, the caller debugs only the new process, not any child processes.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.ProcessCreationFlags.DetachedProcess">
            <summary>
            For console processes, the new process does not inherit its parent's console (the default). The new process can call the AllocConsole function at a later time to create a console. For more information, see Creation of a Console.
            This value cannot be used with CREATE_NEW_CONSOLE.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.ProcessCreationFlags.ExtendedStartupInfoPresent">
            <summary>
            The process is created with extended startup information; the lpStartupInfo parameter specifies a STARTUPINFOEX structure.
            Windows Server 2003 and Windows XP: This value is not supported.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.ProcessCreationFlags.InheritParentAffinity">
            <summary>
            The process inherits its parent's affinity. If the parent process has threads in more than one processor group, the new process inherits the group-relative affinity of an arbitrary group in use by the parent.
            Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP: This value is not supported.
            </summary>
        </member>
        <member name="T:Woof.Ipc.Win32Types.ProcessInformation">
            <summary>
            Contains information about a newly created process and its primary thread.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.ProcessInformation.ProcessHandle">
            <summary>
            A handle to the newly created process. The handle is used to specify the process in all functions that perform operations on the process object.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.ProcessInformation.ThreadHandle">
            <summary>
            A handle to the primary thread of the newly created process. The handle is used to specify the thread in all functions that perform operations on the thread object.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.ProcessInformation.ProcessId">
            <summary>
            A value that can be used to identify a process. The value is valid from the time the process is created until all handles to the process are closed and the process object is freed; at this point, the identifier may be reused.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.ProcessInformation.ThreadId">
            <summary>
            A value that can be used to identify a thread. The value is valid from the time the thread is created until all handles to the thread are closed and the thread object is freed; at this point, the identifier may be reused.
            </summary>
        </member>
        <member name="T:Woof.Ipc.Win32Types.StartupInfo">
            <summary>
            Specifies the window station, desktop, standard handles, and appearance of the main window for a process at creation time.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.StartupInfo.Size">
            <summary>
            The size of the structure, in bytes.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.StartupInfo.Reserved">
            <summary>
            Reserved; must be NULL.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.StartupInfo.Desktop">
            <summary>
            The name of the desktop, or the name of both the desktop and window station for this process. A backslash in the string indicates that the string includes both the desktop and window station names. For more information, see Thread Connection to a Desktop.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.StartupInfo.Title">
            <summary>
            For console processes, this is the title displayed in the title bar if a new console window is created. If NULL, the name of the executable file is used as the window title instead. This parameter must be NULL for GUI or console processes that do not create a new console window.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.StartupInfo.X">
            <summary>
            If dwFlags specifies STARTF_USEPOSITION, this member is the x offset of the upper left corner of a window if a new window is created, in pixels. Otherwise, this member is ignored.
            The offset is from the upper left corner of the screen. For GUI processes, the specified position is used the first time the new process calls CreateWindow to create an overlapped window if the x parameter of CreateWindow is CW_USEDEFAULT.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.StartupInfo.Y">
            <summary>
            If dwFlags specifies STARTF_USEPOSITION, this member is the y offset of the upper left corner of a window if a new window is created, in pixels. Otherwise, this member is ignored.
            The offset is from the upper left corner of the screen. For GUI processes, the specified position is used the first time the new process calls CreateWindow to create an overlapped window if the y parameter of CreateWindow is CW_USEDEFAULT.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.StartupInfo.Width">
            <summary>
            If dwFlags specifies STARTF_USESIZE, this member is the width of the window if a new window is created, in pixels. Otherwise, this member is ignored.
            For GUI processes, this is used only the first time the new process calls CreateWindow to create an overlapped window if the nWidth parameter of CreateWindow is CW_USEDEFAULT.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.StartupInfo.Height">
            <summary>
            If dwFlags specifies STARTF_USESIZE, this member is the height of the window if a new window is created, in pixels. Otherwise, this member is ignored.
            For GUI processes, this is used only the first time the new process calls CreateWindow to create an overlapped window if the nHeight parameter of CreateWindow is CW_USEDEFAULT.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.StartupInfo.BufferWidth">
            <summary>
            If dwFlags specifies STARTF_USECOUNTCHARS, if a new console window is created in a console process, this member specifies the screen buffer width, in character columns. Otherwise, this member is ignored.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.StartupInfo.BufferHeight">
            <summary>
            If dwFlags specifies STARTF_USECOUNTCHARS, if a new console window is created in a console process, this member specifies the screen buffer height, in character rows. Otherwise, this member is ignored.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.StartupInfo.FillAttribute">
            <summary>
            If dwFlags specifies STARTF_USEFILLATTRIBUTE, this member is the initial text and background colors if a new console window is created in a console application. Otherwise, this member is ignored.
            This value can be any combination of the following values: FOREGROUND_BLUE, FOREGROUND_GREEN, FOREGROUND_RED, FOREGROUND_INTENSITY, BACKGROUND_BLUE, BACKGROUND_GREEN, BACKGROUND_RED, and BACKGROUND_INTENSITY. For example, the following combination of values produces red text on a white background:
            FOREGROUND_RED | BACKGROUND_RED | BACKGROUND_GREEN | BACKGROUND_BLUE
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.StartupInfo.Flags">
            <summary>
            A bitfield that determines whether certain STARTUPINFO members are used when the process creates a window. This member can be one or more of the following values.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.StartupInfo.ShowWindow">
            <summary>
            If dwFlags specifies STARTF_USESHOWWINDOW, this member can be any of the values that can be specified in the nCmdShow parameter for the ShowWindow function, except for SW_SHOWDEFAULT. Otherwise, this member is ignored.
            For GUI processes, the first time ShowWindow is called, its nCmdShow parameter is ignored wShowWindow specifies the default value. In subsequent calls to ShowWindow, the wShowWindow member is used if the nCmdShow parameter of ShowWindow is set to SW_SHOWDEFAULT.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.StartupInfo.Reserved2">
            <summary>
            Reserved for use by the C Run-time; must be zero.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.StartupInfo.Reserved3">
            <summary>
            Reserved for use by the C Run-time; must be NULL.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.StartupInfo.StdInputHandle">
            <summary>
            If dwFlags specifies STARTF_USESTDHANDLES, this member is the standard input handle for the process. If STARTF_USESTDHANDLES is not specified, the default for standard input is the keyboard buffer.
            If dwFlags specifies STARTF_USEHOTKEY, this member specifies a hotkey value that is sent as the wParam parameter of a WM_SETHOTKEY message to the first eligible top-level window created by the application that owns the process. If the window is created with the WS_POPUP window style, it is not eligible unless the WS_EX_APPWINDOW extended window style is also set. For more information, see CreateWindowEx.
            Otherwise, this member is ignored.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.StartupInfo.StdOutputHandle">
            <summary>
            If dwFlags specifies STARTF_USESTDHANDLES, this member is the standard output handle for the process. Otherwise, this member is ignored and the default for standard output is the console window's buffer.
            If a process is launched from the taskbar or jump list, the system sets hStdOutput to a handle to the monitor that contains the taskbar or jump list used to launch the process.For more information, see Remarks.
            Windows 7, Windows Server 2008 R2, Windows Vista, Windows Server 2008, Windows XP, and Windows Server 2003:  This behavior was introduced in Windows 8 and Windows Server 2012.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.StartupInfo.StdErrorHandle">
            <summary>
            If dwFlags specifies STARTF_USESTDHANDLES, this member is the standard error handle for the process. Otherwise, this member is ignored and the default for standard error is the console window's buffer.
            </summary>
        </member>
        <member name="T:Woof.Ipc.Win32Types.WtsSessionInfo">
            <summary>
            Contains information about a client session on a Remote Desktop Session Host (RD Session Host) server.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.WtsSessionInfo.SessionId">
            <summary>
            Session identifier of the session.
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.WtsSessionInfo.WinStationName">
            <summary>
            String that contains the WinStation name of this session. The WinStation name is a name that Windows associates with the session, for example, "services", "console", or "RDP-Tcp#0".
            </summary>
        </member>
        <member name="F:Woof.Ipc.Win32Types.WtsSessionInfo.State">
            <summary>
            A value from the <see cref="T:Woof.Ipc.Win32Types.WtsConnectStateClass"/> enumeration type that indicates the session's current connection state.
            </summary>
        </member>
    </members>
</doc>
